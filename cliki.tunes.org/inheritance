<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head><script src="//archive.org/includes/analytics.js?v=cf34f82" type="text/javascript"></script>
<script type="text/javascript">window.addEventListener('DOMContentLoaded',function(){var v=archive_analytics.values;v.service='wb';v.server_name='wwwb-app218.us.archive.org';v.server_ms=162;archive_analytics.send_pageview({});});</script>
<script type="text/javascript" src="/_static/js/bundle-playback.js?v=MzYkZ0TU" charset="utf-8"></script>
<script type="text/javascript" src="/_static/js/wombat.js?v=UHAOicsW" charset="utf-8"></script>
<script type="text/javascript">
  __wm.init("https://web.archive.org/web");
  __wm.wombat("http://cliki.tunes.org:80/Inheritance","20050403165934","https://web.archive.org/","web","/_static/",
	      "1112547574");
</script>
<link rel="stylesheet" type="text/css" href="/_static/css/banner-styles.css?v=S1zqJCYt" />
<link rel="stylesheet" type="text/css" href="/_static/css/iconochive.css?v=qtvMKcIJ" />
<!-- End Wayback Rewrite JS Include -->
<title>CTO : Inheritance</title><link rel="alternate" type="application/rss+xml" title="Recent Changes" href="https://web.archive.org/web/20050403165934/http://cliki.tunes.org/recent-changes.rdf"><link rel="stylesheet" href="https://web.archive.org/web/20050403165934cs_/http://cliki.tunes.org/admin/cliki.css"></head><body><div id="banner"><a title="CTO" class="logo" href="https://web.archive.org/web/20050403165934/http://cliki.tunes.org/">CTO</a> <span>CLiki for the TUNES project</span></div><div id="navbar"><a class="internal" href="https://web.archive.org/web/20050403165934/http://cliki.tunes.org/index">Home</a> <a class="internal" href="https://web.archive.org/web/20050403165934/http://cliki.tunes.org/Recent%20Changes">Recent Changes</a> <a class="internal" href="https://web.archive.org/web/20050403165934/http://cliki.tunes.org/CLiki">About CLiki</a> <a class="internal" href="https://web.archive.org/web/20050403165934/http://cliki.tunes.org/Text%20Formatting">Text Formatting</a> <a class="internal" onclick="if(name=window.prompt('New page name ([A-Za-z0-9 ])')) document.location='https://web.archive.org/web/20050403165934/http://cliki.tunes.org/edit/'+name ;return false;" href="/web/20050403165934/http://cliki.tunes.org/">Create New Page</a></div><div id="main"><h1>Inheritance</h1>In the beginning, single inheritance is an implementation hack for having a tiny bit of cheap genericity when managing sequential structures: the gross idea is that a function that only depends on the first <var>n</var> fields of a structure will also work on any structure that has the same kind of first <var>n</var> fields, independently from what further fields the structure has. Inheritance has then been theorized as an operation by which object interfaces are derived from others, by enriching them with new entries. Multiple Inheritance generalizes it, by allowing to define a new interface starting from the union of a set of many previous interfaces, instead of only one previous interface. Oddities that require special care happen in case of conflicts between old interfaces, or between old interfaces and new definitions, etc.

<p>Inheritance is the typical example of an element of <a class="internal" href="https://web.archive.org/web/20050403165934/http://cliki.tunes.org/tradition">tradition</a> that people mistakenly consider as being <a class="internal" href="https://web.archive.org/web/20050403165934/http://cliki.tunes.org/holy">holy</a>, and refuse to reject even though reason demonstrates how inadequate it is for all the purposes it was proposed for. It used to be a nifty hack to achieve a few high-level things at reasonable cost in low-level languages, and was since presented as a universal panacea for program design, despite its being a conceptual mess, and a brake to a really clear understanding of programming.

<p>Inheritance is proposed as a way to provide incremental definition of objects. It grossly fails at doing so, as shows the need to carefully design and maintain inheritance trees/graphs, that can't be incrementally modified or enriched, but through addition of leaf nodes, least havoc be wroken. Those trees and graphs, i.e. partial orders, are presented as the ultimate structure for object design, relying on the myth that "order" (the fact that things be well-defined) be the same as "order" (a reflexive antisymmetric transitive relation).

<p>Inheritance was also explored as a way to implement subtyping, as confirmed by the standard interpretation that a class B inherits from class A iff every instance of B is an instance of A (people often say that inheritance is to model the "is a" relation). This works just fine in so-called "dynamically typed" languages, such as <a class="internal" href="https://web.archive.org/web/20050403165934/http://cliki.tunes.org/CLOS">CLOS</a>, <a class="internal" href="https://web.archive.org/web/20050403165934/http://cliki.tunes.org/Smalltalk">Smalltalk</a>, <a class="internal" href="https://web.archive.org/web/20050403165934/http://cliki.tunes.org/Objective-C">Objective-C</a>, or <a class="internal" href="https://web.archive.org/web/20050403165934/http://cliki.tunes.org/Self">Self</a>, where you can equate the type of an object with its immediate (non-recursive) interface.

<p>However, this just doesn't work in "statically typed" languages, as soon as the type system includes recursive types. In such languages, such as <a class="internal" href="https://web.archive.org/web/20050403165934/http://cliki.tunes.org/C%2B%2B">C++</a>, <a class="internal" href="https://web.archive.org/web/20050403165934/http://cliki.tunes.org/Java">Java</a>, <a class="internal" href="https://web.archive.org/web/20050403165934/http://cliki.tunes.org/Eiffel">Eiffel</a>, inheritance fails to implement subtyping, as originally intended and often incorrectly alleged. Then lots of people go at length trying to develop very complex and contorted theoretical and practical tools to integrate inheritance into larger designs, whereas it would have been a trifle with subtyping.

<p>If we formalize inheritance in statically-typed languages, we see that we must distinguish the concept of a class from the type of direct instances of a class. A class is then a function taking a type and returning a type. A subclass B of a class A is then a function that for any type t, returns a type B(t) that is a subtype of A(t). Only the type of direct instances of a class A is the fixpoint of A, i.e. a type t such that t=A(t), and the fixpoint of a subclass B is usually not a subtype of it (except very particular cases, for example, when there is no recursion in the definition of A). (<em>An example illustrating this point would be helpful.</em>)

<p>From this formalization, inheritance appears as a very special-case useful construct, whereby functions from type to type (classes) can be defined, but, they can only be either instantiated (fix point), or specialized through a complex processes of refining; the refining of a class must be linear (does not handle duplication or in-depth transformation of arguments), with only one argument in the case of single-inheritance, and bizarre constraints in the case of multiple-inheritance; that refining can't be abstracted or factored, every refinement pattern can be applied only once, and it must be right after having been defined.

<p>If such a special-case construct is any useful then imagine how much more useful could be the generic constructs unleashed! Instead of a limited and contorted construct like inheritance, we could have a clean type-system as a whole algebra of types, defined from a small set of orthogonal operations, among which explicit abstraction over types and type-refinements, higher-order functors, fix points, merging, delegation, renaming, etc. With such a type-system, one could still do inheritance as a special case, but no one would, since inheritance is such a minatory concept.

<p>For people who want to do better than inheritance in languages with recursive types, such type systems already exist (see <a class="internal" href="https://web.archive.org/web/20050403165934/http://cliki.tunes.org/OCAML">OCAML</a>).

<p>As for incremental programming, the only right approach to it is <a class="internal" href="https://web.archive.org/web/20050403165934/http://cliki.tunes.org/Reflection">Reflection</a>. This allows modifications which pervade the system of objects in complicated ways to be made in, to some degree, an automated manner.

<p>For example, one may wish to do something as simple as the widespread renaming of an entity throughout the system, or something as complicated as tracing the possible paths of data of a particular type through objects, and automatically inserting security checks on that data at the appropriate places. Non-reflective incremental programming models do not support this flexibility of refinement.
<hr><p><b>This page is linked from: </b> <a class="internal" href="https://web.archive.org/web/20050403165934/http://cliki.tunes.org/Io">Io</a> &nbsp; <a class="internal" href="https://web.archive.org/web/20050403165934/http://cliki.tunes.org/Object-Oriented">Object-Oriented</a> &nbsp; </div><div id="footer"><form action="https://web.archive.org/web/20050403165934/http://cliki.tunes.org/admin/search"><a class="internal" href="https://web.archive.org/web/20050403165934/http://cliki.tunes.org/edit/Inheritance">Edit page</a> | <a class="internal" href="https://web.archive.org/web/20050403165934/http://cliki.tunes.org/Inheritance?source">View source</a> | Revisions: <b title="Mon, 25 Aug 2003 16:06:22 GMT">0</b>  | <input name="words" size="30"><input type="submit" value="search"></form><div id="disclaimer">CTO pages can be modified by anyone at anytime.
Imagine an appropriate disclaimer. Double it. Add two.</div></body></html></div><!--
     FILE ARCHIVED ON 16:59:34 Apr 03, 2005 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 06:08:26 Dec 18, 2022.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
<!--
playback timings (ms):
  captures_list: 72.0
  exclusion.robots: 0.156
  exclusion.robots.policy: 0.143
  cdx.remote: 0.115
  esindex: 0.015
  LoadShardBlock: 37.657 (3)
  PetaboxLoader3.datanode: 56.481 (4)
  CDXLines.iter: 20.559 (3)
  load_resource: 84.19
  PetaboxLoader3.resolve: 43.676
-->