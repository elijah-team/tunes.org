<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head><script src="//archive.org/includes/analytics.js?v=cf34f82" type="text/javascript"></script>
<script type="text/javascript">window.addEventListener('DOMContentLoaded',function(){var v=archive_analytics.values;v.service='wb';v.server_name='wwwb-app218.us.archive.org';v.server_ms=521;archive_analytics.send_pageview({});});</script>
<script type="text/javascript" src="/_static/js/bundle-playback.js?v=MzYkZ0TU" charset="utf-8"></script>
<script type="text/javascript" src="/_static/js/wombat.js?v=UHAOicsW" charset="utf-8"></script>
<script type="text/javascript">
  __wm.init("https://web.archive.org/web");
  __wm.wombat("http://cliki.tunes.org:80/Constructor%20and%20Destructor","20050417210430","https://web.archive.org/","web","/_static/",
	      "1113771870");
</script>
<link rel="stylesheet" type="text/css" href="/_static/css/banner-styles.css?v=S1zqJCYt" />
<link rel="stylesheet" type="text/css" href="/_static/css/iconochive.css?v=qtvMKcIJ" />
<!-- End Wayback Rewrite JS Include -->
<title>CTO : Constructor and Destructor</title><link rel="alternate" type="application/rss+xml" title="Recent Changes" href="https://web.archive.org/web/20050417210430/http://cliki.tunes.org/recent-changes.rdf"><link rel="stylesheet" href="https://web.archive.org/web/20050417210430cs_/http://cliki.tunes.org/admin/cliki.css"></head><body><div id="banner"><a title="CTO" class="logo" href="https://web.archive.org/web/20050417210430/http://cliki.tunes.org/">CTO</a> <span>CLiki for the TUNES project</span></div><div id="navbar"><a class="internal" href="https://web.archive.org/web/20050417210430/http://cliki.tunes.org/index">Home</a> <a class="internal" href="https://web.archive.org/web/20050417210430/http://cliki.tunes.org/Recent%20Changes">Recent Changes</a> <a class="internal" href="https://web.archive.org/web/20050417210430/http://cliki.tunes.org/CLiki">About CLiki</a> <a class="internal" href="https://web.archive.org/web/20050417210430/http://cliki.tunes.org/Text%20Formatting">Text Formatting</a> <a class="internal" onclick="if(name=window.prompt('New page name ([A-Za-z0-9 ])')) document.location='https://web.archive.org/web/20050417210430/http://cliki.tunes.org/edit/'+name ;return false;" href="/web/20050417210430/http://cliki.tunes.org/">Create New Page</a></div><div id="main"><h1>Constructor and Destructor</h1>In computer <a class="internal" href="https://web.archive.org/web/20050417210430/http://cliki.tunes.org/term">term</a>inology, a constructor is some function that takes a list of parameter <a class="internal" href="https://web.archive.org/web/20050417210430/http://cliki.tunes.org/object">object</a>s and makes a new object out of these by assembling them into a structure.

<p>A destructor does just the converse, allowing to "destructure" some object into more elementary components.

<p><ul>
<li>First, it must be noted that not all components of a structure need be explicitly given to a constructor or returned by a destructor. Actually, for the sake of readability, but also because no system can be founded without (infinitely many) implicit axioms, most of the times, many parameters are left implicit, and taken as obvious from the context, or their value being deferred to some later time.
<li>Second, when some unique objects such as <a class="internal" href="https://web.archive.org/web/20050417210430/http://cliki.tunes.org/memory">memory</a> (see <a class="internal" href="https://web.archive.org/web/20050417210430/http://cliki.tunes.org/linear%20logic">linear logic</a>) are taken into account as parts of constructions, destructuring the construction to yield the original state of some of these unique objects requires the construction to no longer be available, so that complete destructuration of such an object also means its destruction.
<li>Third, though the algorithmical meaning of objects may come from global properties of complex constructions, the only construction and destructuration operators provided by the programming language may be local, providing no way to safely express these properties.
</ul>

<p>Of course, all these aspects can be validly combined in many ways, from constructions with every meaningful aspect being explicit non-linear being considered in a one operation (the clean case), to constructions with most aspects being implicit, with semi-explicit linear compounds and no way to have the language automatically group operations in a semantically safe way (which is the dirty case).

<p>For instance, in the traditional "object-oriented programming<a class="internal" href="https://web.archive.org/web/20050417210430/http://cliki.tunes.org/edit/object-oriented%20programming">?</a>" paradigm, the constructor/destructor terminology is used only as relates to the pool of available low-level side-effective resources, with algorithmical aspects of objects being implicit, so that in this point of view, destructuration is destruction. The facts that the traditional C++ model forces all resources, however different and independent, to be considered together when describing construction of objects, in some arbitrary unique of point of view, and that constructors and destructors have to be specified independently from each other, without any provision of consistency being accessible to programmers or checkers, all contribute to make this model as dirty as it could be, and shows to the least the extreme confusion of minds of those behind it.

<p>On the contrary, in traditional typed lambda calculi, constructors are used for objects of high-level semantics, in a usually pure way, where all low-level side-effects are made implicit; the "destructor" terminology is not used explicitly in usual functional programming style, destructors being implicitly used through pattern-matching (which provides a very efficient and expressive way to deal with it); the term is also avoided because it could lead to confusion with destruction of objects, whereas semantically, nothing is destroyed or created, as pure functional objects always exist in some abstract space, whereas the fact that their storage may be reclaimed after they are no more useful is an independent implementational issue.

<p>Of course, storage is no more an independent issue in contexts where resource availability is critical; clean style can then be preserved while allowing full expression of resource-wise constraints by use of <a class="internal" href="https://web.archive.org/web/20050417210430/http://cliki.tunes.org/Linear%20Logic">Linear Logic</a>, in which constructors and destructors have the combined semantics of high-level algorithmical construction and low-level resource allocation.

<p>Unhappily, our generalized point of view is never explicitly considered, whereas it unifies those above particular concepts, as well as many others. In the TUNES project, faithful to our liberal philosophy<a class="internal" href="https://web.archive.org/web/20050417210430/http://cliki.tunes.org/edit/liberal%20philosophy">?</a>, we strive to enable everyone to have full control on what one may leave implicit or make explicit in any particular program, so that one makes one's own paradigm for available paradigm constructors, so that it destructures in a way that fits whatever program one writes, instead of trying to force everyone to use a one centrally decided paradigm. And controlling what is implicit is precisely what <a class="internal" href="https://web.archive.org/web/20050417210430/http://cliki.tunes.org/reflection">reflection</a> is all about.</div><div id="footer"><form action="https://web.archive.org/web/20050417210430/http://cliki.tunes.org/admin/search"><a class="internal" href="https://web.archive.org/web/20050417210430/http://cliki.tunes.org/edit/Constructor%20and%20Destructor">Edit page</a> | <a class="internal" href="https://web.archive.org/web/20050417210430/http://cliki.tunes.org/Constructor%20and%20Destructor?source">View source</a> | Revisions: <b title="Mon, 30 Dec 2002 09:58:25 GMT">0</b>  | <input name="words" size="30"><input type="submit" value="search"></form><div id="disclaimer">CTO pages can be modified by anyone at anytime.
Imagine an appropriate disclaimer. Double it. Add two.</div></body></html></div><!--
     FILE ARCHIVED ON 21:04:30 Apr 17, 2005 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 06:11:41 Dec 18, 2022.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
<!--
playback timings (ms):
  captures_list: 402.809
  exclusion.robots: 0.06
  exclusion.robots.policy: 0.054
  cdx.remote: 0.045
  esindex: 0.007
  LoadShardBlock: 311.636 (3)
  PetaboxLoader3.datanode: 341.084 (4)
  CDXLines.iter: 12.235 (3)
  load_resource: 115.647
  PetaboxLoader3.resolve: 64.433
-->