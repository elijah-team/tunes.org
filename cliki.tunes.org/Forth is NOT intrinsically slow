<html><head><script src="//archive.org/includes/analytics.js?v=cf34f82" type="text/javascript"></script>
<script type="text/javascript">window.addEventListener('DOMContentLoaded',function(){var v=archive_analytics.values;v.service='wb';v.server_name='wwwb-app226.us.archive.org';v.server_ms=152;archive_analytics.send_pageview({});});</script>
<script type="text/javascript" src="/_static/js/bundle-playback.js?v=MzYkZ0TU" charset="utf-8"></script>
<script type="text/javascript" src="/_static/js/wombat.js?v=UHAOicsW" charset="utf-8"></script>
<script type="text/javascript">
  __wm.init("https://web.archive.org/web");
  __wm.wombat("http://cliki.tunes.org:80/Forth%20is%20NOT%20intrinsically%20slow","20031222155655","https://web.archive.org/","web","/_static/",
	      "1072108615");
</script>
<link rel="stylesheet" type="text/css" href="/_static/css/banner-styles.css?v=S1zqJCYt" />
<link rel="stylesheet" type="text/css" href="/_static/css/iconochive.css?v=qtvMKcIJ" />
<!-- End Wayback Rewrite JS Include -->
<title>TUNES : Forth is NOT intrinsically slow</title>
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="https://web.archive.org/web/20031222155655/http://cliki.tunes.org/recent-changes.rdf"></link>
<link rel="stylesheet" href="https://web.archive.org/web/20031222155655cs_/http://cliki.tunes.org/admin/cliki.css"></link>
<link rel="shortcut icon" type="image/x-icon" href="https://web.archive.org/web/20031222155655im_/http://cliki.tunes.org/favicon.ico"></link>
</head>
<body><div class="navbar"><table width="100%"><tr><td colspan="3" class="disclaimer">CLiki pages can be edited by anybody at any time.  Imagine a <i>scarily comprehensive legal disclaimer</i>.  Double it.  Add two.  <!-- Now shut your eyes.  Dark, isn't it? --></td>
</tr>
</table>
<center><table><tr><td><a href="https://web.archive.org/web/20031222155655/http://cliki.tunes.org/index">Home</a>
</td>
<td><a href="https://web.archive.org/web/20031222155655/http://cliki.tunes.org/Recent%20Changes">Recent Changes</a>
</td>
<td><a href="https://web.archive.org/web/20031222155655/http://cliki.tunes.org/CLiki">About CLiki</a>
</td>
<td><a href="https://web.archive.org/web/20031222155655/http://cliki.tunes.org/Text%20Formatting">Text Formatting</a>
</td>
<td><a onclick="if(name=window.prompt('New page name ([A-Za-z0-9 ])')) document.location='https://web.archive.org/web/20031222155655/http://cliki.tunes.org/edit/'+name ;return false;" href="#">Create new page</a>
</td>
</tr>
</table>
</center>
</div>
<h1>Forth is NOT intrinsically slow</h1>
An <a class="internal" href="essay" onmouseover="window.status='essay'; return true" onmouseout="window.status='';">essay</a>.

<p>From the <a class="internal" href="Small%20C" onmouseover="window.status='Small C'; return true" onmouseout="window.status='';">Small C</a> node:
<ul class="links">
  <li><a href="https://web.archive.org/web/20031222155655/http://bespin.org/~tom/writings/retro.conclusions.txt">A paper</a>
 by <a class="internal" href="Tom%20Novelli" onmouseover="window.status='Tom Novelli'; return true" onmouseout="window.status='';">Tom Novelli</a> describing the deficiencies of <a class="internal" href="Forth" onmouseover="window.status='Forth'; return true" onmouseout="window.status='';">Forth</a> and how Small C is intrinsically faster. -- <a class="internal" href="Seaslug" onmouseover="window.status='Seaslug'; return true" onmouseout="window.status='';">Seaslug</a></li>
</ul>

<p>This conclusion is amazing. I want to cite here 2 fragments of <a class="internal" href="Tom%20Novelli" onmouseover="window.status='Tom Novelli'; return true" onmouseout="window.status='';">Tom Novelli</a>'s paper:

<p><blockquote>
  [..] In the course of my parser studies, I came across Small C.  The compiler is the size of a simple <a class="internal" href="Forth" onmouseover="window.status='Forth'; return true" onmouseout="window.status='';">Forth</a>, inherently faster, and it produces tighter code. The concept is simple: the parser methodically translates infix formulas into postfix, stack-based, assembly/machine code -- basically it translates to Forth!

<p>  [..] Since <a class="internal" href="C%20language" onmouseover="window.status='C language'; return true" onmouseout="window.status='';">C</a> translates directly to <a class="internal" href="Forth" onmouseover="window.status='Forth'; return true" onmouseout="window.status='';">Forth</a>, Forth can never win the race. [..]
</blockquote>

<p>Evidently a non sequitur. Prescinding from the accuracy of the above description, how one can conclude that <em><a class="internal" href="C%20language" onmouseover="window.status='C language'; return true" onmouseout="window.status='';">C</a> is faster than <a class="internal" href="Forth" onmouseover="window.status='Forth'; return true" onmouseout="window.status='';">Forth</a></em>?? Where does this paper <em>demonstrate</em> that <a class="internal" href="Forth" onmouseover="window.status='Forth'; return true" onmouseout="window.status='';">Forth</a> compilers cannot produce fast code as (at least) <a class="internal" href="C%20language" onmouseover="window.status='C language'; return true" onmouseout="window.status='';">C</a> compilers?

<p>What are these Forth features impossible to implement efficiently? The double stack architecture? Nonsense. With a <em>simple</em> technique (to implement and to understand) is possible to cache in registers both the data stack and the return address stack. This technique, at least for caching data stack items in registers, is documented in:

<p><ul class="links">
  <li>Peter J. Knaggs' Ph.D. thesis, <a href="https://web.archive.org/web/20031222155655/http://decweb.bournemouth.ac.uk/staff/pknaggs/thesis/index.html">Practical and Theoretical Aspects of Forth Software Development</a>
, 5.6 "Optimisation using a Stack image".</li>
</ul>

<p>This is nedeed on register machines, of course. But what is so great about register machines? I suggest to have a look at this book, now on-line:

<p><ul class="links">
  <li>Philip J. Koopman, Jr., <a href="https://web.archive.org/web/20031222155655/http://www.ece.cmu.edu/~koopman/stack_computers/index.html">Stack Computers: the new wave</a>
.</li>
</ul>

<p>Professor Koopman is the designer of <a class="internal" href="TIGRE" onmouseover="window.status='TIGRE'; return true" onmouseout="window.status='';">TIGRE</a>. Note also that there are not technical obstacles to not apply more aggressive optimizations when compiling Forth programs (the above mentioned papers shows, for example, how is possible to apply type inference to Forth programs). For reference see various papers by M. Anton Ertl and others about aggressive optimizations (but <strong>not</strong> about type systems, he is skeptic on this matter):

<p><ul class="links">
  <li><a href="https://web.archive.org/web/20031222155655/http://www.complang.tuwien.ac.at/projects/forth.html">Forth Research at Institut für Computersprachen</a>
.</li>
</ul>

<p>Besides all this, the paper by <a class="internal" href="Tom%20Novelli" onmouseover="window.status='Tom Novelli'; return true" onmouseout="window.status='';">Tom Novelli</a> misses a fundamental point about <a class="internal" href="Forth" onmouseover="window.status='Forth'; return true" onmouseout="window.status='';">Forth</a>: its background philosophy of simplicity and minimalism without which <a class="internal" href="Forth" onmouseover="window.status='Forth'; return true" onmouseout="window.status='';">Forth</a> is really much less interesting. Given his dedication and effort with <a class="internal" href="Retro" onmouseover="window.status='Retro'; return true" onmouseout="window.status='';">Retro</a> this come as a great surprise to me.

<p>The only thing I could agree is the fact that these days <a class="internal" href="Forth" onmouseover="window.status='Forth'; return true" onmouseout="window.status='';">Forth</a> is a minority "language" (<a class="internal" href="Forth" onmouseover="window.status='Forth'; return true" onmouseout="window.status='';">Forth</a> originated as a complete environment, see <a href="https://web.archive.org/web/20031222155655/http://ultratechnology.com/4th_1970.html">FORTH - A Language for Interactive Computing</a>
) and is quite different from mainstream languages (but not so different from <a class="internal" href="Lisp" onmouseover="window.status='Lisp'; return true" onmouseout="window.status='';">Lisp</a> for example) so there much less research into Forth optimizing compilers.

<p>Nonetheless at least both main commercial <a class="internal" href="Forth" onmouseover="window.status='Forth'; return true" onmouseout="window.status='';">Forth</a> providers, <a href="https://web.archive.org/web/20031222155655/http://www.forth.com/">Forth, Inc.</a>
 and <a href="https://web.archive.org/web/20031222155655/http://www.mpeltd.demon.co.uk/">MPE, Ltd.</a>
, invest substantial effort into native code optimizing compilers.

<p>Finally, Forth's inventor, <a class="internal" href="Chuck%20Moore" onmouseover="window.status='Chuck Moore'; return true" onmouseout="window.status='';">Chuck Moore</a>, worth a mention: he is totally against <em>complex automatic</em> optimizations, he is against compilers in a certain sense (to long to explain here: his rational needs a lot of context).

<p>-- <a class="internal" href="Mad70" onmouseover="window.status='Mad70'; return true" onmouseout="window.status='';">Mad70</a>

<p><hr>

<p>In retrospect, it was somewhat thoughtless of me to say that one language was intrinsically faster than another, since this is rarely the case. I think Tom mixed up the idea of "faster" with "easier to optimize." It's pretty clear to me that a language like <a class="internal" href="Small%20C" onmouseover="window.status='Small C'; return true" onmouseout="window.status='';">Small C</a> where types are explicit would be easier to optimize than a language like <a class="internal" href="Forth" onmouseover="window.status='Forth'; return true" onmouseout="window.status='';">Forth</a>. The other, small, probably wrong argument I could make in favor of <a class="internal" href="tcn" onmouseover="window.status='tcn'; return true" onmouseout="window.status='';">tcn</a> is that <a class="internal" href="Forth" onmouseover="window.status='Forth'; return true" onmouseout="window.status='';">Forth</a> is a more dynamic language than <a class="internal" href="Small%20C" onmouseover="window.status='Small C'; return true" onmouseout="window.status='';">Small C</a>, which definitely <b>does</b> have an effect on the performance of output code.
I apologize for the lack of thought I put into the <a class="internal" href="Small%20C" onmouseover="window.status='Small C'; return true" onmouseout="window.status='';">Small C</a> node.

<p>-- <a class="internal" href="seaslug" onmouseover="window.status='seaslug'; return true" onmouseout="window.status='';">seaslug</a>

<p>I bet the Small C compiler already does some optimizing whereas most Forths don't

<p>-- <a class="internal" href="futhin" onmouseover="window.status='futhin'; return true" onmouseout="window.status='';">futhin</a>

<p>Though Forth is a dynamic <i>environment</i>, the language is as static as C.  Look at the code output from a Forth compiler, and compare against C's output -- neither invoke routines to interpret anything (unless you explicitly call EVALUATE in Forth, or yyparse() in C).

<p>-- KC5TJA

<p><hr>

<p>Well, I want to make clear that your comment was a pretext to write this essay but my only intention was and is to address some <em>common</em> misconceptions about <a class="internal" href="Forth" onmouseover="window.status='Forth'; return true" onmouseout="window.status='';">Forth</a>, not to stigmatize you or Tom (this remains for me a strictly technical discussion).

<p><ul>
<li>About "<em>one language is intrinsically faster than another</em>" being a thoughtless statement in general:

<p>I am not from the school of "all languages are made equal" (the argument of Turing equivalence especially is a nonsense, see the thread "<em>so-called Turing-Equivalence</em>" by <a class="internal" href="Fare" onmouseover="window.status='Fare'; return true" onmouseout="window.status='';">Fare</a> from <a href="https://web.archive.org/web/20031222155655/http://lists.tunes.org/archives/tunes/1999-August/thread.html">1999-August Archives</a>
 of the Tunes mailing-list). So, for me, inquiries about the possibility, for a given language, to implement a reasonable efficient translator (interpreter and/or compiler) are absolutely legitimate.

<p>In particular, I expect that languages with <a class="internal" href="abstraction%20inversion" onmouseover="window.status='abstraction inversion'; return true" onmouseout="window.status='';">abstraction inversion</a>, where you are forced to express primitive concepts in terms of more complex, are intrinsically difficult to optimize (but remember that "primitive" is not an absolute concept, see <a class="internal" href="Quotienting" onmouseover="window.status='Quotienting'; return true" onmouseout="window.status='';">Quotienting</a>).
</li>
<li>About dynamism of <a class="internal" href="Forth" onmouseover="window.status='Forth'; return true" onmouseout="window.status='';">Forth</a>: yes and no. Forth as language (opposed to Forth as environment, see above mentioned essay: "<em>FORTH - A Language for Interactive Computing</em>") retains the ability to load and interpret/compile source code during run-time. This ability is not extensively used these days, for what I can see in sources published on Internet (I don't know about commercial, closed source code). So in this sense is certainly more dynamic than <a class="internal" href="Small%20C" onmouseover="window.status='Small C'; return true" onmouseout="window.status='';">Small C</a>.

<p>But, as counterbalance, is necessary to consider also that these small fragments of code are intended to be developed with <a href="https://web.archive.org/web/20031222155655/http://colorforth.com/binding.html">a philosophy of early binding</a>
, as stated by <a class="internal" href="Chuck%20Moore" onmouseover="window.status='Chuck Moore'; return true" onmouseout="window.status='';">Chuck Moore</a>.
</li>
</ul>

<p>I think this is enough for now.

<p>-- <a class="internal" href="Mad70" onmouseover="window.status='Mad70'; return true" onmouseout="window.status='';">Mad70</a>

<p><hr>

<p>Another quote from <a class="internal" href="Tom%20Novelli" onmouseover="window.status='Tom Novelli'; return true" onmouseout="window.status='';">Tom Novelli</a>'s paper is:

<p><blockquote>
  [..] As an intermediate language, such as the proposed TUNES LLL, Forth is a poor choice.  It does little to abstract the differences between hardware
platforms [..]
</blockquote>

<p>I disagree.  Forth doesn't come out of the box with hardware abstractions, but that doesn't mean it can't abstract the differences between hardware platforms easily.  It can.  It is easy to add new words to Forth's vocabulary that abstract the hardware layer out.  

<p>Look at EMIT, a common Forth word for sending a character to the screen; is it not an abstraction?  It can be implemented for all the different hardware platforms.  It will behave the same way.  Similar words to EMIT can easily be made for any other hardware abstractions you desire such as accessing files, memory, or using the fpu vs. floating-point implemented in software.

<p>The fact is, Forth encourages abstractions.  Coding in Forth is all about how well you can abstract and factor out your code.  It provides all the tools that a programmer needs to abstact his code quickly and easily.

<p>Looking at it in a different way, a minimal Forth can be implemented for each architecture in less than 5KB (2KB-3KB is possible).  Each Forth could contain all the primitives necessary to run an entire OS ontop of it.  A programmer with a decent grasp of assembly could implement a simple, minimal Forth for any architecture within a few days.

<p>Because of the ease in implementing a Forth for a new architecture, I like to say that Forth is the most portable language out there.  As long as all the Forth implementations have the same wordset and as long as Forth programs don't delve into assembly, there is no issue about the portability of the code.

<p>The nice thing about this kind of portability is that the machine is still accessible.  A hardware platform with 3d graphics can be fully utilized, whereas for other platforms, the 3d graphics support is implemented in software.

<p>-- <a class="internal" href="thin" onmouseover="window.status='thin'; return true" onmouseout="window.status='';">thin</a>

<p>ANY language can access the raw hardware, if the OS lets it.  Forth is handy
for testing new OSes and embedded systems, I'll give you that - mainly
because it reduces upload/reboot cycles.  I'm actually working on Retro
again.. but I don't see Forth playing a central role in the future.

<p>For the record, I only said a Small C COMPILER is inherently faster than a
Forth COMPILER.  Forth does a dictionary search on every token, and the
dictionary is bigger than in C.  All other things being equal, of course. 
The Forth Philosophy (tm) is great.  C is a generally a better language,
though.

<p>I stand by my conclusions.  And by the way, I'm making good progress
improving the user interface &amp; managability of Linux.

<p>-- <a class="internal" href="Tom%20Novelli" onmouseover="window.status='Tom Novelli'; return true" onmouseout="window.status='';">Tom Novelli</a>

<p>Forth's speed compared to C depends entirely on the CPU type. On many CPUs, an unoptimized Forth will compete, if not outperform, some optimizing C compilers. The opposite may be true on others, but the former seems to be the more common case.

<p>On another note, Forth can usually handle more subroutine calls than C, referring to both speed and memory. A Forth with good register assignments can have the minimal amount of call overhead the CPU allows. For example, on x86 using STC, when using the hardware stack as the return stack, just CALL and RET are needed for each call. No "stack frame" or the like needs to be set up at the beginning of each word, and destroyed at the end. Additionally, no information needs to be saved before a call. 

<p>-- Arke<hr><b>This page is linked from: </b> <a class="internal" href="Small%20C" onmouseover="window.status='Small C'; return true" onmouseout="window.status='';">Small C</a> &nbsp; <div class="footer"><form action="https://web.archive.org/web/20031222155655/http://cliki.tunes.org/admin/search"><a href="/web/20031222155655/http://cliki.tunes.org/view-source/Forth%20is%20NOT%20intrinsically%20slow" class="nav" onmouseover="window.status='View the source'; return true">Show</a>/<a href="/web/20031222155655/http://cliki.tunes.org/edit/Forth%20is%20NOT%20intrinsically%20slow" class="nav" onmouseover="window.status='Edit this page'; return true">Edit source</a> |  Last edit: Sat, 22 Nov 2003 01:41:24 | <a href="/web/20031222155655/http://cliki.tunes.org/history/Forth%20is%20NOT%20intrinsically%20slow" class="nav" onmouseover="window.status='Show page history'; return true">History</a> | <a href="CLiki+Search" class="nav" onmouseover="window.status='Search all pages'; return true">Search:</a>&nbsp;<input name="words" size="20"></form></div><!--
     FILE ARCHIVED ON 15:56:55 Dec 22, 2003 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 06:21:00 Dec 18, 2022.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
<!--
playback timings (ms):
  captures_list: 70.394
  exclusion.robots: 0.075
  exclusion.robots.policy: 0.067
  RedisCDXSource: 1.639
  esindex: 0.013
  LoadShardBlock: 48.991 (3)
  PetaboxLoader3.datanode: 89.822 (4)
  CDXLines.iter: 16.347 (3)
  load_resource: 75.72
  PetaboxLoader3.resolve: 29.889
-->